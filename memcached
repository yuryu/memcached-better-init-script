#! /bin/bash
### BEGIN INIT INFO
# Provides:            memcached
# Required-Start:      $remote_fs $syslog
# Required-Stop:       $remote_fs $syslog
# Should-Start:        $local_fs
# Should-Stop:         $local_fs
# Default-Start:       2 3 4 5
# Default-Stop:        0 1 6
# Short-Description:   Start memcached daemon
# Description:         Start up memcached, a high-performance memory caching daemon
### END INIT INFO

# Usage:
# cp /etc/memcached/memcached.conf /etc/memcached/memcached_server1.conf
# cp /etc/memcached/memcached.conf /etc/memcached/memcached_server2.conf
# start all instances:
# /etc/init.d/memcached start
# start one instance:
# /etc/init.d/memcached start server1
# stop all instances:
# /etc/init.d/memcached stop
# stop one instance:
# /etc/init.d/memcached stop server1
# There is no "status" command.

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/memcached
DAEMONNAME=memcached
DESC=memcached
CONFDIR=/etc/sysconfig

PORT=11211
USER=nobody
MAXCONN=1024
CACHESIZE=64
OPTIONS=""

test -x $DAEMON || exit 0

set -e

. /lib/lsb/init-functions

# Edit /etc/default/memcached to change this.
ENABLE_MEMCACHED=yes
test -r $CONFDIR/memcached && . $CONFDIR/memcached

FILES=($CONFDIR/memcached-*)
# check for alternative config schema
if [ -r "${FILES[0]}" ]; then
    CONFIGS=()
    for FILE in "${FILES[@]}";
    do
        # remove prefix
        NAME=`basename $FILE`

        # check optional second param
        if [ $# -ne 2 ];
        then
            # add to config array
            CONFIGS+=($NAME)
        elif [ "memcached-$2" == "$NAME" ];
        then
            # use only one memcached
            CONFIGS=($NAME)
            break;
        fi;
    done;
    if [ ${#CONFIGS[@]} == 0 ];
    then
        echo "Config not exist for: $2" >&2
        exit 1
    fi;
else
    CONFIGS=(memcached)
fi;

CONFIG_NUM=${#CONFIGS[@]}
for ((i=0; i < $CONFIG_NUM; i++)); do
    NAME=${CONFIGS[${i}]}
    . $CONFDIR/$NAME
    PIDFILE="/var/run/memcached/${NAME}.pid"
    DAEMONARGS="-d -p $PORT -u $USER -m $CACHESIZE -c $MAXCONN -P $PIDFILE"

    case "$1" in
        start)
            echo -n "Starting $DESC: "
            if [ $ENABLE_MEMCACHED = yes ]; then
                start_daemon -p $PIDFILE $DAEMON $DAEMONARGS
                echo "$NAME."
            else
                echo "$NAME disabled in $CONFDIR/memcached."
            fi
            ;;
        stop)
            echo -n "Stopping $DESC: "
            killproc -p $PIDFILE $DAEMON
            echo "$NAME."
            rm -f $PIDFILE
            ;;

        restart|force-reload)
            #
            #       If the "reload" option is implemented, move the "force-reload"
            #       option to the "reload" entry above. If not, "force-reload" is
            #       just the same as "restart".
            #
            echo -n "Restarting $DESC: "
            killproc -p $PIDFILE $DAEMON
            rm -f $PIDFILE
            if [ $ENABLE_MEMCACHED = yes ]; then
                sleep 1
                start_daemon -p $PIDFILE $DAEMON $DAEMONARGS
                echo "$NAME."
            else
                echo "$NAME disabled in $CONFDIR/memcached."
            fi
            ;;
        status)
            echo -n "$NAME: "
            echo `pidofproc -p $PIDFILE $DAEMON`
            ;;
        *)
            N=/etc/init.d/$NAME
            echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
            exit 1
            ;;
    esac
done;

exit 0
